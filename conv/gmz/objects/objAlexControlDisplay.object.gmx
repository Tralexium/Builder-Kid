<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>99</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars

jump_text = ""
jump_x = 8
shoot_text = ""
shoot_x = room_width-8;
text_y = room_height-8;
slide_amnt = 0; // 0: on screen, 1: off screen
slide_dist = 128;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Assign text &amp; move text panels

if(scrAlexCheckWaveClear() &amp;&amp; !scrAlexCheckGameOver()) {
    slide_amnt = lerp(slide_amnt, 0, .2);
} else {
    slide_amnt = lerp(slide_amnt, 1, .2);
}

// Get the proper text
var tc = objAlexTowerController

if (instance_exists(tc)) {
    if(tc.sell_mode) {
        jump_text = "[JUMP] to sell"
        shoot_text = "[SHOOT] to cancel"
    }
    else if(tc.equiped_tower != noone) {
        jump_text = "[JUMP] to place"
        shoot_text = "[SHOOT] to cancel"
    }
    else if(tc.shop_visible) {
        jump_text = "[JUMP] to equip tower"
        shoot_text = "[SHOOT] to cancel"
    }
    else if(scrAlexCheckGameClear()){
        jump_text = ""
        shoot_text = "[HOLD SHOOT] to finish"
    }
    else {
        jump_text = "[JUMP] to open shop"
        shoot_text = "[HOLD SHOOT] to start"
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw what the jump and shoot buttons do atm

display_set_gui_size(view_wview[0], view_hview[0]);
draw_set_alpha(1-slide_amnt)

draw_set_font(fAlexSmall)
draw_set_valign(fa_bottom)

var move_amnt = slide_dist*slide_amnt

// Jump button
draw_set_halign(fa_left)
scrDrawTextOutline(jump_x-move_amnt, text_y, jump_text, c_white, c_black);

// Shoot button
draw_set_halign(fa_right)
scrDrawTextOutline(shoot_x+move_amnt, text_y, shoot_text, c_white, c_black);

draw_set_alpha(1)
display_set_gui_size(view_wport[0], view_hport[0]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
