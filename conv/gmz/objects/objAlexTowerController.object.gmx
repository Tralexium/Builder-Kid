<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars

coins = global.remaining_cash      // Keeps track of player's money, also acts as the starting amount
in_use = false                     // Whether the player is choosing/placing a tower
shop_visible = false               // The menu used for selecting a tower
sell_mode = false                  // Whether the player is choosing a tower to sell
equiped_tower = noone
sell_area_inst = noone
tower_point_x = room_width/2       // The x where the centre of the tower will be hovering
tower_point_y = room_height/2      // Same as above for the Y axis

// Misc.
t = 0                              // General use timer
slot_index = 0                     // Currently selected tower
old_slot_index = 0
draw_t = 0                         // Timer used for drawing
coin_count_x = room_width/2 - 12
coin_count_y = -14
sell_button_x = room_width/2
sell_button_y = room_height - 20
show_coin_count = true             // Slides the coin counter when viewing the shop or grabbing a coin
show_coin_dur = 100                // How long to show the coin counter for
grid_alpha = 0                     // Grid alpha for when placing a tower
shop_bg_alpha = 0                  // Shop background alpha
shop_alpha = 0                     // Shop ellements alpha
fade_in_shop = false               // Because of how easing work increasing the alpha based on the last slot scale is not possible, that's why this boolean activates the fading instead
cursor_rejected_val = 0            // Used for blending and shaking the cursor when selecting an unnavailable tower
cursor_shake_pos = 0
cursor_blend_col = c_white
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Add towers

tower[0] = objAlexAimerTower
tower[1] = objAlexOctoTower
tower[2] = objAlexSpiralTower
tower[3] = objAlexBlasterTower
tower[4] = objAlexSprayerTower
tower[5] = objAlexBouncerTower

for(i=0; i&lt;6; i++) {
    tower_slot_scale[i] = 0;
    tower_slot_alpha[i] = 1;
    
    var temp_tower = instance_create(-100, -100, tower[i]);
    
    tower_sprite[i] = temp_tower.portrait;
    tower_name[i] = temp_tower.name;
    tower_cost[i] = temp_tower.cost;
    
    instance_destroy(temp_tower);
    
    if(instance_exists(tower[i]))
        tower_slot_revealed[i] = true;
    else
        tower_slot_revealed[i] = false;
}

slot_start_x = 88
slot_start_y = 80+8
slot_hor_margin = 112
slot_ver_margin = 144-24

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Exit store

in_use = false
shop_visible = false
sell_mode = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Hide coin counter

show_coin_count = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tower manipulation / placing

// Increment timer
t++;

var hor = scrButtonCheck(global.rightButton) - scrButtonCheck(global.leftButton);
var ver = scrButtonCheck(global.downButton) - scrButtonCheck(global.upButton);

// Get the desired coords to later move the tower towards to
with(objAlexPlayer) {
    if(abs(hor) + abs(ver) != 0) {
    
        var tower_center = 3 // default, when sell mode is on
        if(other.equiped_tower != noone)
            tower_center = other.equiped_tower.grid_size/2 + 2;  // the 2 is there to put distance
                                                            // between the tower and the player
    
        // Point where the tower should lerp to
        other.tower_point_x = clamp(floor((x + (hor*tower_center)*16)/16)*16, 0, room_width);
        other.tower_point_y = clamp(floor((y + (ver*tower_center)*16)/16)*16, 0, room_height);
    }
}

if(equiped_tower != noone) {
    
    // Snap tower to the point
    equiped_tower.fake_x = lerp(equiped_tower.fake_x, tower_point_x, .4);
    equiped_tower.fake_y = lerp(equiped_tower.fake_y, tower_point_y, .4);
    
    // Place tower
    if(scrButtonCheckPressed(global.jumpButton)) {
        if(!equiped_tower.blocked) {
            equiped_tower.active = true
            equiped_tower.x = tower_point_x;
            equiped_tower.y = tower_point_y;
            coins -= equiped_tower.cost;
            
            audio_play_sound(sndAlexTowerPlaced, 0, false);
            
            equiped_tower = noone
            alarm[1] = 1
        } else {
            equiped_tower.tower_shake_amnt = 5
            audio_play_sound(sndAlexUIError, 0, false);
        }
    }
    
    // Cancel tower
    if(scrButtonCheckPressed(global.shootButton)) {
        instance_destroy(equiped_tower)
        equiped_tower = noone
        alarm[1] = 1
        audio_play_sound(sndAlexUICancel, 0, false);
    }
}


if(sell_mode) {
    sell_area_inst.target_x = tower_point_x
    sell_area_inst.target_y = tower_point_y
    
    // Cancel sell mode
    if(scrButtonCheckPressed(global.shootButton)) {
        instance_destroy(sell_area_inst)
        sell_area_inst = noone
        alarm[1] = 1
        audio_play_sound(sndAlexUICancel, 0, false);
    }
}


// Grid visuals
if(equiped_tower != noone || sell_mode) {
    grid_alpha = .2+dsin(t*4)*.1
} else {
    grid_alpha = 0
}

/*
if(scrButtonCheckPressed(global.jumpButton) &amp;&amp; equiped_tower == noone &amp;&amp; instance_exists(objAlexPlayer)) {
    var tower = instance_create(-100, -100, objAlexAimTower)
    equiped_tower = tower;
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tower menu

// Handle logic and draw related vars
if(shop_visible) {
    // LOGIC
    // Move around the slot index
    var hor = scrButtonCheckPressed(global.rightButton) - scrButtonCheckPressed(global.leftButton);
    var ver = scrButtonCheckPressed(global.downButton) - scrButtonCheckPressed(global.upButton);
 
    if(abs(hor)+abs(ver) != 0) {    
        if(slot_index == 6) {
            if(ver &gt; 0)
                slot_index = 1;
            else if(ver &lt; 0)
                slot_index = 4;
        } else if((slot_index == 4 &amp;&amp; ver == 1) || (slot_index == 1 &amp;&amp; ver == -1))
            slot_index = 6;     // goto sell button
        else if(slot_index == 3 &amp;&amp; hor == -1)
            slot_index += 2;    // horizontal scrolling
        else if(slot_index == 2 &amp;&amp; hor == 1)
            slot_index -= 2;    // horizontal scrolling
        else
            slot_index += hor+(ver*3);
        
        if(old_slot_index != 4 &amp;&amp; old_slot_index != 1) {
            if(slot_index &lt; 0) slot_index += 3;
            if(slot_index &gt; 5) slot_index -= 3;
        }
        
        if(slot_index != old_slot_index) {
            audio_stop_sound(sndAlexUIMove)
            audio_play_sound(sndAlexUIMove, 0, false)
            old_slot_index = slot_index
        }
    }

    // Choose a tower
    if(scrButtonCheckPressed(global.jumpButton)) {
        if(slot_index == 6) {   // Sell mode
            sell_area_inst = instance_create(room_width/2, room_height/2, objAlexSellArea)
            sell_mode = true
            shop_visible = false
            audio_play_sound(sndAlexUISelect, 0, false);
        }
        else if(coins &gt;= tower_cost[slot_index]) {   // Tower mode
            var tower_inst = instance_create(-100, -100, tower[slot_index])
            equiped_tower = tower_inst;
            shop_visible = false
            audio_play_sound(sndAlexUISelect, 0, false);
        } else {
            cursor_rejected_val = 1
            audio_play_sound(sndAlexUIError, 0, false);
        }
    }
    
    // Exit the menu
    if(scrButtonCheckPressed(global.shootButton)) {
        alarm[1] = 1
        audio_play_sound(sndAlexUICancel, 0, false)
    }
    
    // VISUALS
    draw_t++;
    shop_bg_alpha += .1;
    shop_bg_alpha = min(shop_bg_alpha, 1) // Clamp
    
    // Restore slot alpha
    if(draw_t == 1) {
        for(i=0; i&lt;6; i++) {
            tower_slot_alpha[i] = 1
        }
    }
    
    // Pop the tower slots into place
    for(i=0; i&lt;6; i++) {
        var anim_dur = 30
        var anim_start = i*(anim_dur/8)
        if(draw_t &gt;= anim_start &amp;&amp; draw_t &lt; anim_start+anim_dur)
            tower_slot_scale[i] = scrAlexEaseOutBounce(draw_t-anim_start, 0, 1, anim_dur)
    }
    
    // Increase the shop opacity when all slots are in place
    if(tower_slot_scale[5] &gt;= .9)
        fade_in_shop = true
    
    if(fade_in_shop)
        shop_alpha = min(shop_alpha + .1, 1);
    
    // Reveal towers if the player can afford them
    for(i=0; i&lt;6; i++) {
        if(coins &gt;= tower_cost[i]) {
            tower_slot_revealed[i] = true
        }
    }
} else if(shop_bg_alpha &gt; 0){
    shop_bg_alpha = max(shop_bg_alpha - 0.1, 0);
    shop_alpha = max(shop_alpha - 0.15, 0);
    for(i=0; i&lt;6; i++) {
        tower_slot_alpha[i] = max(tower_slot_alpha[i] - 0.15, 0);
    }
}

// Cursor related drawing
if(cursor_rejected_val &gt; 0) {    
    cursor_rejected_val -= .05;
    cursor_shake_pos = dsin(draw_t*40)*(10*cursor_rejected_val)
    cursor_blend_col = merge_colour(c_white, c_red, cursor_rejected_val)
}

// Open the menu
if(scrAlexCheckWaveClear() &amp;&amp; !scrAlexCheckGameOver() &amp;&amp; !scrAlexCheckGameClear() &amp;&amp; !scrAlexCheckRestartPrompt() &amp;&amp; !in_use) {
    if(scrButtonCheckPressed(global.jumpButton)) {
        in_use = true
        shop_visible = true
        shop_alpha = 0
        draw_t = 0
        slot_index = 0
        fade_in_shop = false
        
        for(i=0; i&lt;6; i++) {
            tower_slot_scale[i] = 0
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Coin counter

if(show_coin_count || scrAlexCheckWaveClear()) {
    coin_count_y = lerp(coin_count_y, 14, .2);
} else {
    coin_count_y = lerp(coin_count_y, -14, .2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Show coin counter

show_coin_count = true
alarm[0] = show_coin_dur
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the tower pointing dot for test porpuses

/*
if(global.debugVisuals) {
    draw_set_colour(c_red)
    draw_circle(tower_point_x*2-2, tower_point_y*2-2, 2, false)
    draw_set_colour(c_blue)
    draw_circle(tower_point_x*2+2, tower_point_y*2-2, 2, false)
    draw_set_colour(c_lime)
    draw_circle(tower_point_x*2, tower_point_y*2+2, 2, false)
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the tower menu

display_set_gui_size(view_wview[0], view_hview[0]);

// Draw BG
draw_set_alpha(shop_bg_alpha);
draw_sprite_tiled(sprAlexTowerMenuBG, 0, draw_t/2, draw_t/2);

// Draw tower menu
for(i=0; i&lt;6; i++) {
    draw_set_alpha(1);
    var xx = slot_start_x + (i*slot_hor_margin);
    var yy = slot_start_y;
    if(i &gt; 2) {
        xx = slot_start_x + (i*slot_hor_margin) - (3*slot_hor_margin);
        yy = slot_start_y + slot_ver_margin;
    }
    var scale = tower_slot_scale[i]
    var alpha = tower_slot_alpha[i]
    
    // draw slot
    draw_sprite_ext(sprAlexTowerSlot, 0, xx, yy, scale, scale, 0, -1, alpha);
    // draw cursor
    if(slot_index == 6)
        draw_sprite_ext(sprAlexSellButtonCursor, t/5, sell_button_x+cursor_shake_pos, sell_button_y, scale, scale, 0, cursor_blend_col, alpha)
    else if(i == slot_index)
        draw_sprite_ext(sprAlexTowerSlotCursor, t/5, xx+cursor_shake_pos, yy, scale, scale, 0, cursor_blend_col, alpha)
        
    // draw tower info
    draw_set_alpha(shop_alpha)
    var sprite = tower_sprite[i]
    var name = tower_name[i]
    var cost = tower_cost[i]
    
    draw_set_font(fAlexSmall)
    draw_set_valign(fa_middle)
    draw_set_halign(fa_center)
    
    var cost_string = string(coins)+"/"+string(cost)
    var cost_length = (string_length(cost_string)*4)+2
    
    if(tower_slot_revealed[i]) {
        draw_sprite(sprite, 0, xx, yy);
        scrDrawTextOutline(xx+2, yy+18, name, c_white, c_black)
        draw_sprite(sprAlexCoinIcon, t/5, xx-cost_length, yy+40)
    } else {
        draw_sprite_ext(sprite, 0, xx, yy, 1, 1, 0, c_black, shop_alpha);
        draw_sprite(sprAlexSlotQuestionMark, 0, xx, yy)
        scrDrawTextOutline(xx+2, yy+18, "???", c_white, c_black)
        draw_sprite(sprAlexCoinIcon, t/5, xx-cost_length, yy+40)
    }
    
    if(coins &gt;= cost) {
        scrDrawTextOutline(xx+2, yy+40, cost_string, c_white, c_black)
    } else {
        scrDrawTextOutline(xx+2, yy+40, cost_string, c_red, c_black)
    }
    
    // sell button
    draw_sprite(sprAlexSellButton, 0, sell_button_x, sell_button_y)
    
}

draw_set_alpha(1);
display_set_gui_size(view_wport[0], view_hport[0]);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw coin coutner

display_set_gui_size(view_wview[0], view_hview[0]);

draw_set_font(fAlexSmall)
draw_set_halign(fa_left)
draw_set_valign(fa_middle)

draw_sprite(sprAlexCoinIcon, t/5, coin_count_x, coin_count_y);
scrDrawTextOutline(coin_count_x+10, coin_count_y, string(coins), c_white, c_black)

display_set_gui_size(view_wport[0], view_hport[0]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw grid

draw_set_alpha(grid_alpha)
draw_sprite_tiled(sprAlexTowerGrid, 0, 0, 0)
draw_set_alpha(1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
