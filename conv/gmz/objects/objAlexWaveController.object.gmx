<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>110</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init variables

global.list_of_waves = ds_list_create()    // stores all the waves
current_wave_num = global.last_wave_number;      // current wave number
amount_of_waves = 0

wave_id = noone                     // current wave structure
summon_next_wave = false            // when true it allows the next wave to be summoned
summon_next_wave_hold_time = 40     // How long to hold to summon next wave
summon_button = global.shootButton  // Which button to hold
summon_timer = 0                    // Keeps track of how long you're holding the button
wave_cleared = true                 // if no enemies are present on screen
all_waves_cleared = false           // Checks if all the enemy waves have been cleared
finish_fade_out = false             // Fade before going to the next screen

// Whether all the enemies from the # segment are finished spawning
for(i=0; i&lt;3; i++)
    segment_finished[i] = true

// UI
button_sprite_index = sprAlexNextWaveButton
ui_top_margin = 8
ui_active_button_position = room_width - 56
ui_deactive_button_position = room_width
ui_right_margin = ui_active_button_position
ui_button_progress = 0
ui_button_alpha = 1;
ui_finish_transition_active = false;
ui_finish_fade_alpha = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Populate enemy waves
// MAX OF 3 SEGMENTS SUPPORTED PER WAVE!

// Waves 1-9
scrAlexAddEnemyWave(objAlexEnemyHungryTag, 6, 35, 1)
scrAlexAddEnemyWave(objAlexEnemyHungryTag, 8, 25, 1)
scrAlexAddEnemyWave(objAlexEnemyRamboTag, 5, 35, 1)
scrAlexAddEnemyWave(objAlexEnemyHungryTag, 5, 25, 1, objAlexEnemyRamboTag, 3, 20, 180)
scrAlexAddEnemyWave(objAlexEnemySoldierTag, 5, 30, 1, objAlexEnemyHungryTag, 10, 30, 250)
scrAlexAddEnemyWave(objAlexEnemySoldierTag, 5, 30, 1, objAlexEnemyHungryTag, 6, 10, 180, objAlexEnemyRamboTag, 5, 30, 300)
scrAlexAddEnemyWave(objAlexEnemyNinjaFruit, 4, 30, 1, objAlexEnemyRamboTag, 10, 10, 180)
scrAlexAddEnemyWave(objAlexEnemyNinjaFruit, 10, 35, 1)
scrAlexAddEnemyWave(objAlexEnemyRamboTag, 10, 30, 1, objAlexEnemyBlueberapple, 2, 50, 400, objAlexEnemySoldierTag, 8, 20, 550)
// Wave 10 Boss
scrAlexAddEnemyWave(objAlexEnemyTrollface, 3, 100, 1)
// Waves 11-19
scrAlexAddEnemyWave(objAlexEnemyHealthyJar, 1, 1, 1, objAlexEnemyRamboTag, 10, 20, 150)
scrAlexAddEnemyWave(objAlexEnemyBlueberapple, 6, 30, 1, objAlexEnemyNinjaFruit, 8, 50, 50)
scrAlexAddEnemyWave(objAlexEnemyFruitWarrior, 3, 50, 1)
scrAlexAddEnemyWave(objAlexEnemySoldierTag, 15, 20, 1, objAlexEnemyBlueberapple, 5, 50, 100)
scrAlexAddEnemyWave(objAlexEnemyZappyTag, 8, 40, 1, objAlexEnemyHealthyJar, 1, 1, 300)
scrAlexAddEnemyWave(objAlexEnemyNinjaFruit, 12, 40, 1, objAlexEnemyFruitWarrior, 5, 30, 300, objAlexEnemyBlueberapple, 5, 100, 100)
scrAlexAddEnemyWave(objAlexEnemySleepyTag, 1, 1, 1, objAlexEnemyFruitWarrior, 7, 25, 150, objAlexEnemySleepyTag, 3, 50, 200)
scrAlexAddEnemyWave(objAlexEnemyZappyTag, 12, 30, 1, objAlexEnemySlimmy, 3, 120, 100)
scrAlexAddEnemyWave(objAlexEnemyFruitWarrior, 10, 40, 1, objAlexEnemySpitter, 4, 35, 30)
// Wave 20 Boss
scrAlexAddEnemyWave(objAlexEnemyTrollface, 10, 30, 1, objAlexEnemySlimmy, 8, 100, 100)
// Waves 21-24
scrAlexAddEnemyWave(objAlexEnemyHealthyJar, 1, 1, 1, objAlexEnemyFruitWarrior, 15, 20, 150, objAlexEnemyZappyTag, 15, 50, 200)
scrAlexAddEnemyWave(objAlexEnemySlimmy, 7, 100, 1, objAlexEnemySpitter, 10, 50, 1, objAlexEnemySleepyTag, 5, 30, 300)
scrAlexAddEnemyWave(objAlexEnemyFruitWarrior, 20, 30, 1, objAlexEnemySleepyTag, 10, 30, 30)
scrAlexAddEnemyWave(objAlexEnemySpitter, 15, 30, 1, objAlexEnemySlimmy, 10, 50, 100, objAlexEnemySleepyTag, 10, 50, 125)
// Final Boss
scrAlexAddEnemyWave(objAlexEnemyCursedTrollface, 1, 1, 1)

amount_of_waves = ds_list_size(global.list_of_waves)
all_waves_cleared = (current_wave_num &gt;= amount_of_waves)  // We redo this in case the player loads a completed save file that's already at the last possible wave
if(all_waves_cleared) alarm[11] = 1;  // Change the wave button sprite to the flag one
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy all the data structures

ds_list_destroy(global.list_of_waves);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change the button sprite to the flag one

button_sprite_index = sprAlexFinishButton
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start finish fade out

finish_fade_out = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle 3rd wave segment

var segment = wave_id[| 2];

// Spawn next enemy
if(segment[? "amount"] &gt; 0) {
    instance_create(112, -32, segment[? "enemy"]) // create the enemy
    segment[? "amount"]--; // remove the enemy
    alarm[2] = segment[? "seperation"]; // prepare the next enemy
    
    if(segment[? "amount"] == 0)
        segment_finished[2] = true
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle 2nd wave segment

var segment = wave_id[| 1];

// Spawn next enemy
if(segment[? "amount"] &gt; 0) {
    instance_create(112, -32, segment[? "enemy"]) // create the enemy
    segment[? "amount"]--; // remove the enemy
    alarm[1] = segment[? "seperation"]; // prepare the next enemy
    
    if(segment[? "amount"] == 0)
        segment_finished[1] = true
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle 1st wave segment

var segment = wave_id[| 0];

// Spawn next enemy
if(segment[? "amount"] &gt; 0) {
    instance_create(112, -32, segment[? "enemy"]) // create the enemy
    segment[? "amount"]--; // remove the enemy
    alarm[0] = segment[? "seperation"]; // prepare the next enemy
    
    if(segment[? "amount"] == 0)
        segment_finished[0] = true
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input

if(wave_cleared &amp;&amp; !scrAlexCheckShopOpen() &amp;&amp; !scrAlexCheckGameOver() &amp;&amp; !scrAlexCheckRestartPrompt() &amp;&amp; !ui_finish_transition_active) {
    // Hold to summon next wave
    if(scrButtonCheck(summon_button)) {
        summon_timer++;
        if(summon_timer &gt;= summon_next_wave_hold_time) {
            summon_next_wave = true;
            summon_timer = 0;
            
            if(!all_waves_cleared) {
                show_debug_message(current_wave_num)
                var segment_count = ds_list_size(global.list_of_waves[| current_wave_num]);
                for(i=0; i&lt;segment_count; i++) {
                    segment_finished[i] = false
                }
            }
        }
    } else if (summon_timer &gt; 0) {
        summon_timer = lerp(summon_timer, 0, .1);
    }
    
    ui_button_progress = summon_timer/summon_next_wave_hold_time
    
    
    // Restart prompt
    if(scrButtonCheckPressed(global.restartButton)) {
        instance_create(0, 0, objAlexRestartPrompt);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Summon the next wave

// Check if wave is complete
var all_enemies_spawned = true;
for(i=0; i&lt;3; i++){
    if (!segment_finished[i])
        all_enemies_spawned = false
}
if(!wave_cleared &amp;&amp; !instance_exists(objAlexEnemy) &amp;&amp; !instance_exists(objAlexHiddenEnemy) &amp;&amp; all_enemies_spawned &amp;&amp; !scrAlexCheckGameOver()) {
    wave_cleared = true
    
    // SAVE CURRENT STATS
    with(objAlexWorldTracker) {
        event_user(2);
    }
}


if(summon_next_wave) {
    summon_next_wave = false
    
    // Reset timings on all towers
    with(objAlexTower) t = 1;

    // Get next available wave
    if(!all_waves_cleared) {
        // Keep the coin counter and hide it after some time
        with(objAlexTowerController) event_user(0);
    
        show_debug_message("spawn wave")
        audio_play_sound(sndAlexWaveStart, 0, false);
        wave_cleared = false
        wave_id = global.list_of_waves[| current_wave_num]
        current_wave_num++;
        
        // Check if this is the last wave
        if(amount_of_waves == current_wave_num) {
            all_waves_cleared = true
            alarm[11] = 50
        }
        
        // Extract the segments
        for(i=0; i&lt;ds_list_size(wave_id); i++) {
            var segment = wave_id[| i];
            alarm[i] = segment[? "spawn delay"];
        }
    } else {
        ui_finish_transition_active = true;
    
        // So that the fade covers the screen
        depth = -600
        
        // Create the finish beam effect
        with(objAlexPlayer) {
            visible = false;
            instance_create(x, y, objAlexFinishBeam)
        }
        
        // Fade music
        audio_sound_gain(global.currentMusic, 0, 5500)
        
        // Fade screen
        alarm[3] = 100;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// UI Manipulation

// Move the button
if(wave_cleared &amp;&amp; !scrAlexCheckGameOver() &amp;&amp; !ui_finish_transition_active) {
    ui_right_margin = lerp(ui_right_margin, ui_active_button_position, .2)
    ui_button_alpha = lerp(ui_button_alpha, 1, .2);
} else {            
    ui_right_margin = lerp(ui_right_margin, ui_deactive_button_position, .2)
    ui_button_alpha = lerp(ui_button_alpha, 0, .2);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fading if store is open

if(scrAlexCheckShopOpen()) {
    image_alpha = lerp(image_alpha, 0, .05)
} else {
    image_alpha = lerp(image_alpha, 1, .2)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Manually change wave [DEBUG]

if(global.debugMode &amp;&amp; scrAlexCheckWaveClear()) {
    if(keyboard_check_pressed(vk_add))
        current_wave_num++;
    if(keyboard_check_pressed(vk_subtract))
        current_wave_num--;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fade out and transition to the clear screen

if(finish_fade_out) {
    ui_finish_fade_alpha += .005;
    
    if(ui_finish_fade_alpha &gt;= 1.2) {
        // Reset progress
        with(objAlexWorldTracker) {
            event_user(0)
            
            // Destroy the persistent World Tracker
            instance_destroy()
        }
        
        // Restore music volume
        audio_sound_gain(global.currentMusic, 1, 50)
    
        // ALEX CLEAR ROOM: NEXT NANC STAGE GOES HERE
        room_goto(rTestHub)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy all the data structures

ds_list_destroy(global.list_of_waves)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw wave num and button

display_set_gui_size(view_wview[0], view_hview[0]);

draw_set_alpha(image_alpha)

var dark_col = $14182e
draw_set_halign(fa_right)
draw_set_valign(fa_top)
draw_set_font(fAlexSmall)

// Wave num
var wave_text = "Wave: "+string(current_wave_num)+"/"+string(amount_of_waves)
scrDrawTextOutline(ui_right_margin-8, ui_top_margin, wave_text, c_white, dark_col)

// Button
var button_index = 0
if(!wave_cleared) button_index = 1;
draw_sprite_ext(button_sprite_index, button_index, ui_right_margin, ui_top_margin, 1, 1, 0, -1, ui_button_alpha)
draw_set_blend_mode(bm_add)
draw_sprite_part(button_sprite_index, button_index, 0, 0, 48*ui_button_progress, 24, ui_right_margin, ui_top_margin)
draw_set_blend_mode(bm_normal)

draw_set_alpha(ui_finish_fade_alpha)
draw_set_colour(c_black)

draw_rectangle(0, 0, view_wview[0], view_hview[0], false)

draw_set_alpha(1)
display_set_gui_size(view_wport[0], view_hport[0]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
