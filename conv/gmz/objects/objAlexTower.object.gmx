<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAlexDummyTower</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objAlexBlock</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init variables

// Should be edited
name = "Basic Tower"                    // The name of the tower that will appear
top_sprite = sprAlexAimerTowerIdle      // The top part of the tower
top_x = x                               // The X coordinate for the top part
top_y = y                               // The Y coordinate for the top part
top_x_offset = 0                        // Offset for the top_x coord
top_y_offset = 0                        // Offset for the top_y coord
top_image_index = 0                     // Image index of the top part
top_image_spd = .3                      // Image speed for the top part
top_scale = 0                           // Used for the bounce effect when placing the tower
portrait = sprAlexAimerTowerPortrait    // The picture shown in the store
cost = 10                               // How much this tower is worth
grid_size = 2                           // How many grids it will take up (each is 16px)
fire_frequency = 40                     // How often it attacks
projectile = objAlexProjectile          // What projectile is spawns
height = 32                             // From what height to fire the projectile
fire_radius = 0                         // How far from the center should it fire
range = 0                               // The effective range of the tower

// Save related
//saved = false                           // Whether the tower has been saved into memory

// Other vars
t = 0                                   // General use timer
top_t = 0                               // Used for the scaling effect for the top part
active = false                          // Whether the tower is build
out_of_range = false                    // Used for the targetting towers to stop shooting
blocked = false                         // Checks if the tower can't be build because of an obstacle
tower_shake_amnt = 0                    // Used for shaking the tower
fake_x = x
fake_y = y                              // The coordinates used to move around the inactive version of the tower
stunned = false;
stun_time = 75;
star_t = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Un-stun the tower

stunned = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Depth control

depth = -fake_y
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Visuals

t++

top_image_index += top_image_spd

if(!active) {
    image_alpha = 0.5 + (dsin(t*4)*0.2)
} else {
    image_alpha = 1
    
    if(top_t &lt; 20) {
        // Set the top part coordinates to the locked position
        if(top_t == 1) {
            top_x = x + top_x_offset
            top_y = y + top_y_offset
        }
    
        top_t++;
        top_scale = scrAlexEaseOutBounce(top_t, 0, 1, 20)
    }
}

if(blocked) {
    image_blend = c_red
} else {
    image_blend = c_white
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if we are colliding with an obstacle/road

if(place_meeting(fake_x, fake_y, objAlexTowerBlocker) || place_meeting(fake_x, fake_y, objAlexBlock)) {
    blocked = true;
} else {
    blocked = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if tower is stunned

if(stunned) {
    t = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objAlexTowerStunner">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stun the tower

if(active &amp;&amp; !stunned) {
    stunned = true;
    alarm[11] = stun_time
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sell tower

var refund_amnt = round(cost/1.5)

while(refund_amnt &gt; 0) {
    if(refund_amnt &gt;= 10) {
        instance_create(x, y, objAlexGoldenCoin);
        refund_amnt -= 10;
        continue;
    }
    if(refund_amnt &gt;= 5) {
        instance_create(x, y, objAlexSilverCoin);
        refund_amnt -= 5;
        continue;
    } 
    else {
        instance_create(x, y, objAlexBronzeCoin);
        refund_amnt -= 1;
    }
    
}

audio_play_sound(sndAlexTowerSold, 0, false);
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Save tower

scrAlexSaveTower(x, y, object_index);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shake the tower when trying to place it in an invalid spot

var x_coord, y_coord;

if(active) {
    x_coord = x
    y_coord = y
} else {
    x_coord = fake_x
    y_coord = fake_y
    
    if(range &gt; 0) {
        draw_set_alpha(.3);
        draw_set_colour(c_dkgray)
        draw_circle(x_coord, y_coord, range, false)
        draw_set_alpha(1);
    }
}

if(tower_shake_amnt &gt; 0) {
    var shake = dsin(t*40)*tower_shake_amnt;
    tower_shake_amnt -= .2;
    draw_sprite_ext(sprite_index, active, x_coord+shake, y_coord, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
} else {
    draw_sprite_ext(sprite_index, active, x_coord, y_coord, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the top part

draw_sprite_ext(top_sprite, top_image_index, top_x, top_y, top_scale, top_scale, 0, -1, 1)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the dizzy stars when stunned

if(stunned) {
    star_t++;
    draw_sprite(sprAlexTowerStunned, star_t/5, x, top_y-16);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
